/*
 * File generated by sqlgen. Do not edit.
 */

export interface Dispatcher<TResult, TArg extends Record<string, unknown> = {}> {
    (query: string): Promise<TResult[]>;
    (query: string, args: Array<TArg[keyof TArg]>): Promise<TResult[]>;
}

export type GetJoinedResult = {
    t1Id: number;
    colA: string | null;
    colB: string;
    t2Id: number;
    someValue: number | null;
    otherValue: ArrayBuffer | null;
};

export async function getJoined(
    dispatch: Dispatcher<GetJoinedResult>,
): Promise<GetJoinedResult[]> {
    const query = `
        SELECT 
            t1.id t1_id,
            col_a,
            col_b,
            t2.id t2_id,
            some_value,
            other_value
        FROM
            table_1 t1
            JOIN table_2 t2 ON
                t1.id=t2.ref_1
            JOIN table_3 t3 ON
                t1.id=t3.ref_1
        ORDER BY t1.id
        LIMIT 10;
    `;

    return dispatch(query);
}

export type GetTable1Result = {
    colA: string | null;
    colB: string;
    id: number;
};

export async function getTable1(
    dispatch: Dispatcher<GetTable1Result>,
): Promise<GetTable1Result[]> {
    const query = `
        SELECT * FROM table_1;
    `;

    return dispatch(query);
}

export type QueryJoinedArg = {
    msg: string;
    val: number;
};

export type QueryJoinedResult = {
    t1Id: number;
    colA: string | null;
    someValue: number | null;
};

export async function queryJoined(
    dispatch: Dispatcher<QueryJoinedResult, QueryJoinedArg>,
    arg: QueryJoinedArg,
): Promise<QueryJoinedResult[]> {
    const query = `
        SELECT
            t1.id t1_id,
            col_a,
            some_value
        FROM
            table_1 t1
            JOIN table_2 t2
                ON t1.id=t2.ref_1
        WHERE
            col_b = ? AND
            some_value > ?;
    `;

    return dispatch(query, [
        arg.msg,
        arg.val,
    ]);
}

