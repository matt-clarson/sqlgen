/*
 * Code generated by sqlgen. DO NOT EDIT.
 */

export interface Dispatcher {
    (query: string, args?: unknown[]): Promise<{
        keys: string[];
        rows: unknown[][];
    }>;
}

function mapRows<TResult>(keys: string[], rows: unknown[][]): TResult[] {
    const out = Array(rows.length)
    for (let i = 0; i < out.length; i++) {
        const row = rows[i];
        out[i] = Object.fromEntries(pairs(keys, row));
    }
    return out as TResult[];
}

function pairs<T, U>(xs: T[], ys: U[]): [T, U][] {
    const out = Array(xs.length)
    for (let i = 0; i < out.length; i++) {
        out[i] = [xs[i], ys[i]];
    }
    return out;
}

export type GetUserAndItemsArg = {
    email: string;
};

export type GetUserAndItemsResult = {
    username: string | null;
    name: string;
    rating: number | null;
};

export async function getUserAndItems(
    dispatch: Dispatcher,
    arg: GetUserAndItemsArg,
): Promise<GetUserAndItemsResult[]> {
    const query = `
        SELECT
            u.username,
            i.name,
            i.rating
        FROM
            users u
                LEFT JOIN user_items ui ON u.id=ui.user
                LEFT JOIN items i ON ui.item=i.id
        WHERE
            u.email = ?;
    `;

    const result = await dispatch(query, [
        arg.email,
    ]);
    return mapRows<GetUserAndItemsResult>(result.keys, result.rows);
}

