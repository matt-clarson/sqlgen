// Code generated by sqlgen. DO NOT EDIT.

package queries

import (
	"context"
	"database/sql"
)

type SqlQueryer interface {
	QueryContext(ctx context.Context, query string, args ...any) (*sql.Rows, error)
}

type SqlExecer interface {
	ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error)
}

type AvgMonthlyCostPerCampaignCteResult struct {
	Campaign       int32
	AvgMonthlyCost float64
}

func AvgMonthlyCostPerCampaignCte(ctx context.Context, db SqlQueryer) ([]AvgMonthlyCostPerCampaignCteResult, error) {
	query := `
        WITH cost_by_month AS (
            SELECT
                campaign_id AS campaign,
                STRFTIME('%Y-%m', created_date, 'unixepoch') AS month,
                SUM(cost) AS monthly_cost
            FROM
                marketing
            WHERE
                DATE(created_date, 'unixepoch') BETWEEN
                    DATE(DATE(), '-3 months') AND
                    DATE()
            GROUP BY
                campaign_id,
                STRFTIME('%Y-%m', created_date, 'unixepoch')
        )
        SELECT
            campaign,
            AVG(monthly_cost) as avg_monthly_cost
        FROM cost_by_month
        GROUP BY campaign
        ORDER BY campaign;
    `

	rows, err := db.QueryContext(ctx, query)
	if err != nil {
		return nil, err
	}

	var results []AvgMonthlyCostPerCampaignCteResult

	for rows.Next() {
		r := AvgMonthlyCostPerCampaignCteResult{}
		err := rows.Scan(
			&r.Campaign,
			&r.AvgMonthlyCost,
		)
		if err != nil {
			return nil, err
		}
		results = append(results, r)
	}

	return results, rows.Err()
}

type AvgMonthlyCostPerCampaignSubqueryResult struct {
	Campaign       int32
	AvgMonthlyCost float64
}

func AvgMonthlyCostPerCampaignSubquery(ctx context.Context, db SqlQueryer) ([]AvgMonthlyCostPerCampaignSubqueryResult, error) {
	query := `
        SELECT
            campaign,
            AVG(monthly_cost) as avg_monthly_cost
        FROM (
            SELECT
                campaign_id AS campaign,
                STRFTIME('%Y-%m', created_date, 'unixepoch') AS month,
                SUM(cost) AS monthly_cost
            FROM
                marketing
            WHERE
                DATE(created_date, 'unixepoch') BETWEEN
                    DATE(DATE(), '-3 months') AND
                    DATE()
            GROUP BY
                campaign_id,
                STRFTIME('%Y-%m', created_date, 'unixepoch')
        )
        GROUP BY campaign
        ORDER BY campaign;
    `

	rows, err := db.QueryContext(ctx, query)
	if err != nil {
		return nil, err
	}

	var results []AvgMonthlyCostPerCampaignSubqueryResult

	for rows.Next() {
		r := AvgMonthlyCostPerCampaignSubqueryResult{}
		err := rows.Scan(
			&r.Campaign,
			&r.AvgMonthlyCost,
		)
		if err != nil {
			return nil, err
		}
		results = append(results, r)
	}

	return results, rows.Err()
}

